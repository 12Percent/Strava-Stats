dir()
# if safe trump: add to trump EV
# if likely trump: add 3/4 to trump EV, add 1/4 to biden EV
# if toss up: add 1/2 to trump, biden
# if likely biden: add 3/4 to biden EV, add 1/4 to trump EV
# if safe biden: add to biden EV
Biden_EV_safe <- sum((df_9 |> filter(category == "Safe Biden"))$EV)
df_9 <- df_8 |>
mutate(category = case_when(
PollingAverage >= -40 & PollingAverage <= -21 ~ "Safe Trump",
PollingAverage >= -20 & PollingAverage <= -11 ~ "Likely Trump",
PollingAverage >= -10 & PollingAverage <= 10 ~ "Toss Up",
PollingAverage >= 11 & PollingAverage <= 20 ~ "Likely Biden",
PollingAverage >= 21 & PollingAverage <= 40 ~ "Safe Biden"))
options(width = 72)  # ensure R output isn't too wide in the PDF
library("tidyverse")
df_polls <- read_csv("data_set4_polls2020.csv")
BidenWonPoll <- df_polls$BidenPoll > df_polls$TrumpPoll
TrumpWonPoll <- df_polls$TrumpPoll > df_polls$BidenPoll
BidenWonVote <- df_polls$BidenCertVote >= df_polls$TrumpCertVote
TrumpWonVote <- df_polls$TrumpCertVote > df_polls$BidenCertVote
outcomeMatch <- (BidenWonPoll & BidenWonVote) | (TrumpWonPoll & TrumpWonVote)
outcomeMismatch <- (BidenWonPoll & TrumpWonVote) | (TrumpWonPoll & BidenWonVote)
df_test <- df_polls |>
mutate(PollMargin = BidenPoll - TrumpPoll,
VoteMargin = BidenCertVote - TrumpCertVote,
PollError = PollMargin - VoteMargin,
AbsPollError = abs(PollError),
PollPrediction = case_when(
outcomeMatch ~ "Correct",
outcomeMismatch & (AbsPollError <= MarginOfError) ~ "WithinMargin",
outcomeMismatch & (AbsPollError > MarginOfError) ~ "OutsideMargin",
is.na(MarginOfError) ~ "NA")) # bruh
df_test |>
ggplot(aes(x = PollError)) +
geom_histogram()
mean(df_test$PollError)
sd(df_test$PollError)
df_test |>
ggplot(aes(x = PollPrediction)) +
geom_bar()
df_test |>
ggplot(aes(x = DaysToElection)) +
geom_bar(aes(fill = PollPrediction))
df_test |>
ggplot(aes(x = DaysToElection, y = AbsPollError)) +
geom_point(alpha = 0.1) +
geom_vline(xintercept = mean(df_test$DaysToElection, na.rm = TRUE)) +
geom_hline(yintercept = mean(df_test$AbsPollError, na.rm = TRUE)) +
geom_smooth()
cor(df_test$DaysToElection, df_test$AbsPollError, use = "complete")
df_polls_state <- df_test |>
filter(DaysToElection <= 28) |>
group_by(StateName = State, StateAbb, VoteMargin, EV = ElectoralVotes) |>
summarize(PollingAverage = weighted.mean(PollMargin, SampleSize)) |>
select(StateName, StateAbb, PollingAverage, everything())
df_polls_state
df_polls_state |>
ggplot(aes(x = PollingAverage, y = VoteMargin)) +
geom_text(aes(label = StateAbb), size = 3)
cor(df_polls_state$PollingAverage, df_polls_state$VoteMargin, use = "complete")
df_8 <- df_polls_state |>
mutate(Biden_won = case_when(
PollingAverage > 0 ~ "True",
PollingAverage < 0 ~ "False"))
df_8
Biden_EV <- sum((df_8 |> filter(Biden_won == "True"))$EV)
print(Biden_EV)
Trump_EV <- sum((df_8 |> filter(Biden_won == "False"))$EV)
print(Trump_EV)
df_9 <- df_8 |>
mutate(category = case_when(
PollingAverage >= -40 & PollingAverage <= -21 ~ "Safe Trump",
PollingAverage >= -20 & PollingAverage <= -11 ~ "Likely Trump",
PollingAverage >= -10 & PollingAverage <= 10 ~ "Toss Up",
PollingAverage >= 11 & PollingAverage <= 20 ~ "Likely Biden",
PollingAverage >= 21 & PollingAverage <= 40 ~ "Safe Biden"))
df_9 |>
ggplot(aes(x = PollingAverage)) +
geom_histogram()
df_9 |>
ggplot(aes(x = category)) +
geom_bar()
# if safe trump: add to trump EV
# if likely trump: add 3/4 to trump EV, add 1/4 to biden EV
# if toss up: add 1/2 to trump, biden
# if likely biden: add 3/4 to biden EV, add 1/4 to trump EV
# if safe biden: add to biden EV
Biden_EV_safe <- sum((df_9 |> filter(category == "Safe Biden"))$EV)
Biden_EV_likely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 3/4
Biden_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Biden_EV_unlikely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 1/4
Biden_EV_new <- Biden_EV_safe + Biden_EV_likely + Biden_EV_toss_up + Biden_EV_unlikely
print(Biden_EV_new)
Trump_EV_safe <- sum((df_9 |> filter(category == "Safe Trump"))$EV)
Trump_EV_likely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 3/4
Trump_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Trump_EV_unlikely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 1/4
Trump_EV_new <- Trump_EV_safe + Trump_EV_likely + Trump_EV_toss_up + Trump_EV_unlikely
print(Trump_EV_new)
sum(df_9$EV)
# if safe trump: add to trump EV
# if likely trump: add 3/4 to trump EV, add 1/4 to biden EV
# if toss up: add 1/2 to trump, biden
# if likely biden: add 3/4 to biden EV, add 1/4 to trump EV
# if safe biden: add to biden EV
Biden_EV_safe <- sum((df_9 |> filter(category == "Safe Biden"))$EV)
Biden_EV_likely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 3/4
Biden_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Biden_EV_unlikely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 1/4
Biden_EV_new <- Biden_EV_safe + Biden_EV_likely + Biden_EV_toss_up + Biden_EV_unlikely
print(Biden_EV_new)
Trump_EV_safe <- sum((df_9 |> filter(category == "Safe Trump"))$EV)
Trump_EV_likely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 3/4
Trump_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Trump_EV_unlikely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 1/4
Trump_EV_new <- Trump_EV_safe + Trump_EV_likely + Trump_EV_toss_up + Trump_EV_unlikely
print(Trump_EV_new)
sum(df_9$EV)
sum((df_9|>filter(category == "Safe Trump"))$EV)
# if safe trump: add to trump EV
# if likely trump: add 3/4 to trump EV, add 1/4 to biden EV
# if toss up: add 1/2 to trump, biden
# if likely biden: add 3/4 to biden EV, add 1/4 to trump EV
# if safe biden: add to biden EV
Biden_EV_safe <- sum((df_9 |> filter(category == "Safe Biden"))$EV)
Biden_EV_likely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 3/4
Biden_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Biden_EV_unlikely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 1/4
Biden_EV_new <- Biden_EV_safe + Biden_EV_likely + Biden_EV_toss_up + Biden_EV_unlikely
print(Biden_EV_new)
Trump_EV_safe <- sum((df_9 |> filter(category == "Safe Trump"))$EV)
Trump_EV_likely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 3/4
Trump_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Trump_EV_unlikely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 1/4
Trump_EV_new <- Trump_EV_safe + Trump_EV_likely + Trump_EV_toss_up + Trump_EV_unlikely
print(Trump_EV_new)
sum(df_9$EV)
sum((df_9|>filter(category == "Safe Trump"))$EV)
sum((df_9|>filter(category == "Likely Trump"))$EV)
sum((df_9|>filter(category == "Toss Up"))$EV)
sum((df_9|>filter(category == "Likely Biden"))$EV)
sum((df_9|>filter(category == "Safe Biden"))$EV)
View(df_9)
df_9 <- df_8 |>
mutate(category = case_when(
PollingAverage >= -40 & PollingAverage < -20 ~ "Safe Trump",
PollingAverage >= -20 & PollingAverage < -10 ~ "Likely Trump",
PollingAverage >= -10 & PollingAverage <= 10 ~ "Toss Up",
PollingAverage > 10 & PollingAverage <= 20 ~ "Likely Biden",
PollingAverage > 20 & PollingAverage <= 40 ~ "Safe Biden"))
df_9 |>
ggplot(aes(x = PollingAverage)) +
geom_histogram()
df_9 |>
ggplot(aes(x = category)) +
geom_bar()
# if safe trump: add to trump EV
# if likely trump: add 3/4 to trump EV, add 1/4 to biden EV
# if toss up: add 1/2 to trump, biden
# if likely biden: add 3/4 to biden EV, add 1/4 to trump EV
# if safe biden: add to biden EV
Biden_EV_safe <- sum((df_9 |> filter(category == "Safe Biden"))$EV)
Biden_EV_likely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 3/4
Biden_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Biden_EV_unlikely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 1/4
Biden_EV_new <- Biden_EV_safe + Biden_EV_likely + Biden_EV_toss_up + Biden_EV_unlikely
print(Biden_EV_new)
Trump_EV_safe <- sum((df_9 |> filter(category == "Safe Trump"))$EV)
Trump_EV_likely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 3/4
Trump_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Trump_EV_unlikely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 1/4
Trump_EV_new <- Trump_EV_safe + Trump_EV_likely + Trump_EV_toss_up + Trump_EV_unlikely
print(Trump_EV_new)
sum(df_9$EV)
sum((df_9|>filter(category == "Safe Trump"))$EV)
sum((df_9|>filter(category == "Likely Trump"))$EV)
sum((df_9|>filter(category == "Toss Up"))$EV)
sum((df_9|>filter(category == "Likely Biden"))$EV)
sum((df_9|>filter(category == "Safe Biden"))$EV)
# if safe trump: add to trump EV
# if likely trump: add 3/4 to trump EV, add 1/4 to biden EV
# if toss up: add 1/2 to trump, biden
# if likely biden: add 3/4 to biden EV, add 1/4 to trump EV
# if safe biden: add to biden EV
Biden_EV_safe <- sum((df_9 |> filter(category == "Safe Biden"))$EV)
Biden_EV_likely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 3/4
Biden_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Biden_EV_unlikely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 1/4
Biden_EV_new <- Biden_EV_safe + Biden_EV_likely + Biden_EV_toss_up + Biden_EV_unlikely
print(Biden_EV_new)
Trump_EV_safe <- sum((df_9 |> filter(category == "Safe Trump"))$EV)
Trump_EV_likely <- sum((df_9 |> filter(category == "Likely Trump"))$EV) * 3/4
Trump_EV_toss_up <- sum((df_9 |> filter(category == "Toss Up"))$EV) * 1/2
Trump_EV_unlikely <- sum((df_9 |> filter(category == "Likely Biden"))$EV) * 1/4
Trump_EV_new <- Trump_EV_safe + Trump_EV_likely + Trump_EV_toss_up + Trump_EV_unlikely
print(Trump_EV_new)
df_wdi |>
count(region) |>
mutate(proportion = n / sum(n)) |>
ggplot(aes(x = proportion, y = region)) +
geom_bar(stat = "identity")
library("tidyverse")
df_wdi <- read_csv("data05_wdi.csv")
df_wdi |>
ggplot(aes(x = inflation)) +
geom_histogram()
df_wdi |>
ggplot(aes(x = inflation)) +
geom_histogram() +
lims(x = c(-5, 25))
df_wdi |>
ggplot(aes(x=inflation)) +
geom_histogram(binwidth = 1)
df_wdi |>
ggplot(aes(x = region)) +
geom_bar()
df_wdi |>
ggplot(aes(y = region)) +
geom_bar()
df_wdi |>
ggplot(aes(y = region)) +
geom_bar(color = "black", fill = "lightblue") +
labs(x = "Number of countries",
y = "",
title = "Distribution of countries across regions") +
theme_bw()
## Problem sets
set1 <- 100
set2 <- 100
set3 <- 100  # remember everyone gets 100 for cancelled set3
set4 <- 100
set5 <- 92
set6 <- 98
## Exams
midterm1 <- 101
midterm2 <- 99
final <- 90.5
## Create data frame of scores
df_scores_raw <- tribble(
~type, ~number, ~score,
"hw", 1, set1,
"hw", 2, set2,
"hw", 3, set3,
"hw", 4, set4,
"hw", 5, set5,
"hw", 6, set6,
"exam", 1, midterm1,
"exam", 2, midterm2,
"exam", 3, final
)
library("tidyverse")
## Problem sets
set1 <- 100
set2 <- 100
set3 <- 100  # remember everyone gets 100 for cancelled set3
set4 <- 100
set5 <- 92
set6 <- 98
## Exams
midterm1 <- 101
midterm2 <- 99
final <- 90.5
## Create data frame of scores
df_scores_raw <- tribble(
~type, ~number, ~score,
"hw", 1, set1,
"hw", 2, set2,
"hw", 3, set3,
"hw", 4, set4,
"hw", 5, set5,
"hw", 6, set6,
"exam", 1, midterm1,
"exam", 2, midterm2,
"exam", 3, final
)
print(df_scores_raw)
## Replace missing scores with category averages
df_scores_est <- df_scores_raw |>
group_by(type) |>
mutate(score = ifelse(is.na(score), mean(score, na.rm = TRUE), score)) |>
ungroup()
print(df_scores_est)
## Drop lowest homework score
df_scores_est <- df_scores_est |>
mutate(is_lowest = type == "hw" & score == min(score[type == "hw"]),
to_drop = is_lowest & number == min(number[is_lowest])) |>
filter(!to_drop) |>
select(-is_lowest, -to_drop)
print(df_scores_est)
## Calculate **projected** final grade
df_scores_est |>
summarize(hw_avg = mean(score[type == "hw"]),
exam_avg = 0.3 * score[type == "exam" & number == 1] +
0.3 * score[type == "exam" & number == 2] +
0.4 * score[type == "exam" & number == 3]) |>
mutate(final_avg = 0.5 * hw_avg + 0.5 * exam_avg,
letter_grade = case_when(
final_avg >= 93.5 ~ "A",
final_avg >= 90 ~ "A-minus",
final_avg >= 86.5 ~ "B-plus",
final_avg >= 83.5 ~ "B",
final_avg >= 80 ~ "B-minus",
final_avg >= 76.5 ~ "C-plus",
final_avg >= 73.5 ~ "C",
final_avg >= 70 ~ "C-minus",
final_avg >= 66.5 ~ "D-plus",
final_avg >= 63.5 ~ "D",
final_avg >= 60 ~ "D-minus",
TRUE ~ "F"))
setwd("~/code/strava")
df_2021 <- df_clean |>
filter(grepl(2021, date))
library("tidyverse")
df_raw <- read_csv("activities_12_28_2024.csv")
df_clean <- df_raw |>
select(date = "Activity Date",
name = "Activity Name",
type = "Activity Type",
description = "Activity Description",
total_time = "Elapsed Time...6",
time = "Moving Time",
distance = "Distance...7",
elevation = "Elevation Gain") |>
mutate(distance = distance * .621,
total_time = total_time / 60,
time = time / 60,
pace = time / distance)
print(df_clean)
df_clean |>
ggplot(aes(x = distance)) +
geom_histogram(color = "black", binwidth = 1)
summaries <- df_clean |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
print(summaries)
df_2021 <- df_clean |>
filter(grepl(2021, date))
df_2022 <- df_clean |>
filter(grepl(2022, date))
df_2023 <- df_clean |>
filter(grepl(2023, date))
df_2024 <- df_clean |>
filter(grepl(2024, date))
df_clean |>
ggplot(aes(x = distance)) +
geom_histogram(color = "black", fill = "blue",binwidth = 1)
summaries <- df_clean |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
print(summaries)
df_clean |>
ggplot(aes(x = distance)) +
geom_histogram(color = "black", fill = "lightblue",binwidth = 1)
summaries <- df_clean |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
print(summaries)
stats_2021 <- df_2021 |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
stats_2021 <- df_2021 |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
stats_2021
stats_2021 <- df_2021 |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
stats_2021
df_clean |>
mutate(year = case_when(
grepl(2021, date) ~ 2021,
grepl(2022, date) ~ 2022,
grepl(2023, date) ~ 2023,
grepl(2024, date) ~ 2024
))
stats_2021 <- df_2021 |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
stats_2021
df_clean |>
mutate(year = case_when(
grepl(2021, date) ~ 2021,
grepl(2022, date) ~ 2022,
grepl(2023, date) ~ 2023,
grepl(2024, date) ~ 2024)) |>
select(date, year, everything())
stats_2021 <- df_2021 |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
stats_2021
df_clean |>
mutate(
year = case_when(
grepl(2021, date) ~ 2021,
grepl(2022, date) ~ 2022,
grepl(2023, date) ~ 2023,
grepl(2024, date) ~ 2024),
month = case_when(
grepl("Jan", date) ~ "Jan",
grepl("Feb", date) ~ "Feb",
grepl("Mar", date) ~ "Mar",
grepl("Apr", date) ~ "Apr",
grepl("May", date) ~ "May",
grepl("Jun", date) ~ "Jun",
grepl("Jul", date) ~ "Jul",
grepl("Aug", date) ~ "Aug",
grepl("Sep", date) ~ "Sep",
grepl("Nov", date) ~ "Nov",
grepl("Dec", date) ~ "Dec",
)) |>
select(date, year, month, everything())
stats_2021 <- df_2021 |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
stats_2021
df_clean |>
mutate(
year = case_when(
grepl(2021, date) ~ 2021,
grepl(2022, date) ~ 2022,
grepl(2023, date) ~ 2023,
grepl(2024, date) ~ 2024),
month = case_when(
grepl("Jan", date) ~ "Jan",
grepl("Feb", date) ~ "Feb",
grepl("Mar", date) ~ "Mar",
grepl("Apr", date) ~ "Apr",
grepl("May", date) ~ "May",
grepl("Jun", date) ~ "Jun",
grepl("Jul", date) ~ "Jul",
grepl("Aug", date) ~ "Aug",
grepl("Sep", date) ~ "Sep",
grepl("Oct", date) ~ "Oct",
grepl("Nov", date) ~ "Nov",
grepl("Dec", date) ~ "Dec",
)) |>
select(date, year, month, everything())
df_clean |>
ggplot(aes(x = distance)) +
geom_histogram(color = "black", fill = "lightblue",binwidth = 1)
total_summary <- df_clean |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
print(total_summary)
df_dates <- df_clean |>
mutate(
year = case_when(
grepl(2021, date) ~ 2021,
grepl(2022, date) ~ 2022,
grepl(2023, date) ~ 2023,
grepl(2024, date) ~ 2024),
month = case_when(
grepl("Jan", date) ~ "Jan",
grepl("Feb", date) ~ "Feb",
grepl("Mar", date) ~ "Mar",
grepl("Apr", date) ~ "Apr",
grepl("May", date) ~ "May",
grepl("Jun", date) ~ "Jun",
grepl("Jul", date) ~ "Jul",
grepl("Aug", date) ~ "Aug",
grepl("Sep", date) ~ "Sep",
grepl("Oct", date) ~ "Oct",
grepl("Nov", date) ~ "Nov",
grepl("Dec", date) ~ "Dec",
)) |>
select(date, year, month, everything())
df_dates |>
group_by(year) |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n())
df_dates |>
group_by(year) |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
df_clean |>
ggplot(aes(x = distance)) +
geom_histogram(color = "black", fill = "lightblue",binwidth = 1) +
labs(x = "Distance (miles)",
y = "Number of runs",
title = "Number of runs at each distance category")
total_summary <- df_clean |>
summarize(total_miles = sum(distance),
total_hours = sum(time),
total_activities = n()) |>
mutate(total_hours = total_hours / 60)
print(total_summary)
